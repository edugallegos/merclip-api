#!/usr/bin/env python

import os
import sys
import subprocess
import tempfile
import shutil

def print_header():
    print("=" * 60)
    print("YouTube Docker Environment Fix Tool")
    print("=" * 60)
    print("This script will fix YouTube downloads in Docker environments")
    print("=" * 60)
    print()

def update_yt_dlp():
    """Update yt-dlp to the latest version"""
    print("Updating yt-dlp to the latest version...")
    try:
        result = subprocess.run([
            "pip", "install", "--upgrade", "yt-dlp"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("✅ yt-dlp updated successfully")
            # Check version
            ver_result = subprocess.run(["yt-dlp", "--version"], capture_output=True, text=True)
            if ver_result.returncode == 0:
                print(f"New version: {ver_result.stdout.strip()}")
            return True
        else:
            print(f"❌ Failed to update yt-dlp: {result.stderr}")
            return False
    except Exception as e:
        print(f"❌ Error updating yt-dlp: {str(e)}")
        return False

def create_direct_cookies():
    """Create a direct cookie string for YouTube authentication"""
    print("\nCreating direct YouTube authentication cookies...")
    
    # Path to store the new cookies
    cookie_dir = os.path.join("app", "utils")
    cookie_path = os.path.join(cookie_dir, "cookies.txt")
    
    # Ensure directory exists
    os.makedirs(cookie_dir, exist_ok=True)
    
    # Basic Netscape format header
    cookie_header = "# Netscape HTTP Cookie File\n"
    cookie_header += "# This file was generated by docker_youtube_fix.py\n"
    cookie_header += "# https://curl.haxx.se/rfc/cookie_spec.html\n"
    cookie_header += "# This file is used by YouTube-DL to authenticate with YouTube\n"
    cookie_header += "\n"
    
    # Ask user for YouTube cookies
    print("\nTo authenticate with YouTube, we need to create a cookie file.")
    print("Please follow these steps:")
    print("1. Login to YouTube in your browser")
    print("2. Use a browser extension like 'Cookie-Editor' to export cookies")
    print("3. Enter the authentication cookies below")
    print("\nRequired cookies: SID, HSID, SSID, APISID, SAPISID")
    print("You can also provide __Secure-1PSID, __Secure-3PSID for better authentication")
    print()
    
    cookies = {}
    for cookie_name in ['SID', 'HSID', 'SSID', 'APISID', 'SAPISID', '__Secure-1PSID', '__Secure-3PSID']:
        value = input(f"Enter {cookie_name} value (leave empty to skip): ").strip()
        if value:
            cookies[cookie_name] = value
    
    if not cookies:
        print("❌ No cookies provided. Cannot create cookie file.")
        return False
    
    # Check minimum required cookies
    required_cookies = {'SID', 'HSID', 'SSID', 'APISID', 'SAPISID'}
    missing = required_cookies - set(cookies.keys())
    if missing:
        print(f"⚠️ Warning: Missing some recommended cookies: {', '.join(missing)}")
    
    # Create cookie entries in Netscape format
    cookie_content = cookie_header
    
    # Standard cookies
    for name, value in cookies.items():
        if name.startswith('__Secure-'):
            # Secure cookies
            cookie_content += f".youtube.com\tTRUE\t/\tTRUE\t2147483647\t{name}\t{value}\n"
        else:
            # Normal cookies
            cookie_content += f".youtube.com\tTRUE\t/\tFALSE\t2147483647\t{name}\t{value}\n"
            # Also add as .google.com for better compatibility
            cookie_content += f".google.com\tTRUE\t/\tFALSE\t2147483647\t{name}\t{value}\n"
    
    # Write the cookie file
    try:
        with open(cookie_path, 'w', encoding='utf-8') as f:
            f.write(cookie_content)
        
        # Set proper permissions
        os.chmod(cookie_path, 0o644)
        
        print(f"\n✅ Cookie file created at {cookie_path}")
        print(f"File size: {os.path.getsize(cookie_path)} bytes")
        return True
    except Exception as e:
        print(f"❌ Error creating cookie file: {str(e)}")
        return False

def test_youtube_download():
    """Test downloading a YouTube video"""
    print("\nTesting YouTube download...")
    
    cookie_path = os.path.join("app", "utils", "cookies.txt")
    if not os.path.exists(cookie_path):
        print(f"❌ Cookie file not found at {cookie_path}")
        return False
    
    # First test with a standard YouTube video
    test_url = "https://www.youtube.com/watch?v=jNQXAC9IVRw"  # First YouTube video
    
    try:
        print(f"Testing standard video: {test_url}")
        result = subprocess.run([
            "yt-dlp", 
            "--cookies", cookie_path,
            "--skip-download",
            "--no-warnings",
            test_url
        ], capture_output=True, text=True)
        
        if "Please sign in" in result.stderr:
            print("❌ Standard video test failed - YouTube still requires sign in")
            print("Error:", result.stderr.strip())
            return False
        else:
            print("✅ Standard video test passed!")
        
        # Now test with a YouTube Short
        shorts_url = "https://youtube.com/shorts/n-aXWFVMtL0"
        print(f"\nTesting YouTube Short: {shorts_url}")
        
        shorts_result = subprocess.run([
            "yt-dlp",
            "--cookies", cookie_path,
            "--skip-download",
            "--no-warnings",
            shorts_url
        ], capture_output=True, text=True)
        
        if "Please sign in" in shorts_result.stderr:
            print("❌ YouTube Short test failed - YouTube still requires sign in")
            print("Error:", shorts_result.stderr.strip())
            return False
        else:
            print("✅ YouTube Short test passed!")
            return True
            
    except Exception as e:
        print(f"❌ Error during YouTube test: {str(e)}")
        return False

def update_download_video_code():
    """Update the download_video.py code to use a simpler approach"""
    print("\nUpdating download_video.py code...")
    
    target_path = os.path.join("app", "services", "video_pipeline", "steps", "download_video.py")
    if not os.path.exists(target_path):
        print(f"❌ Target file not found: {target_path}")
        return False
    
    # Make a backup of the original file
    backup_path = f"{target_path}.bak"
    try:
        shutil.copy2(target_path, backup_path)
        print(f"✅ Created backup at {backup_path}")
    except Exception as e:
        print(f"❌ Failed to create backup: {str(e)}")
        return False
    
    # Read the original file
    try:
        with open(target_path, 'r', encoding='utf-8') as f:
            content = f.read()
    except Exception as e:
        print(f"❌ Failed to read file: {str(e)}")
        return False
    
    # Look for the _find_cookies_file method
    if "_find_cookies_file" not in content:
        # Method doesn't exist, we need to add it
        print("Adding _find_cookies_file method...")
        
        # Find a good insertion point
        insert_point = content.find("def _get_unique_filename")
        if insert_point == -1:
            print("❌ Could not find insertion point for _find_cookies_file method")
            return False
        
        # Find the end of the method
        method_end = content.find("def ", insert_point + 1)
        if method_end == -1:
            print("❌ Could not find end of _get_unique_filename method")
            return False
        
        # Insert our new method
        find_cookies_method = '''
    def _find_cookies_file(self):
        """Find the cookies file by checking multiple possible locations."""
        # List of possible cookie file locations
        cookie_paths = [
            os.path.join("app", "utils", "cookies.txt"),
            os.path.join("/app", "app", "utils", "cookies.txt"),
            os.path.join(os.getcwd(), "app", "utils", "cookies.txt"),
            os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(__file__)))), "utils", "cookies.txt"),
            "cookies.txt"
        ]
        
        for path in cookie_paths:
            self.logger.info(f"Checking for cookies at: {path}")
            if os.path.exists(path):
                file_size = os.path.getsize(path)
                self.logger.info(f"Found cookies file at: {path} (size: {file_size} bytes)")
                return path
        
        self.logger.warning("No cookies file found in any of the standard locations")
        return None
    
'''
        new_content = content[:method_end] + find_cookies_method + content[method_end:]
        content = new_content
    
    # Update the process method to use a simpler approach
    if "youtube" in content and "cookiefile" in content:
        print("Updating YouTube download code...")
        
        # Look for the youtube cookie handling code
        youtube_section_start = content.find("if context.platform == \"youtube\":")
        if youtube_section_start == -1:
            print("❌ Could not find YouTube section in the code")
            return False
        
        # Find the section where cookies are handled
        cookies_section_start = content.find("cookies_path", youtube_section_start)
        if cookies_section_start == -1:
            print("❌ Could not find cookies section in the YouTube code")
            return False
        
        # Find where the cookie handling ends and format selection begins
        format_section_start = content.find("# Check if this is a YouTube Shorts URL", cookies_section_start)
        if format_section_start == -1:
            print("❌ Could not find format selection section in the YouTube code")
            return False
        
        # Build the new cookie handling code
        new_cookie_code = '''            cookies_path = self._find_cookies_file()
            
            if cookies_path:
                self.logger.info(f"Using cookies file: {cookies_path}")
                ydl_opts['cookiefile'] = cookies_path
                # Set proper file permissions
                try:
                    os.chmod(cookies_path, 0o644)
                    self.logger.info("Set permissions on cookies file")
                except Exception as e:
                    self.logger.warning(f"Could not set permissions on cookies file: {str(e)}")
            else:
                self.logger.warning("No cookies file found, YouTube downloads may fail")
            
'''
        
        # Replace the old cookie handling code
        new_content = content[:cookies_section_start] + new_cookie_code + content[format_section_start:]
        content = new_content
    
    # Update the format selection for YouTube Shorts
    if "'/shorts/' in context.url" in content or "is_shorts =" in content:
        print("Updating YouTube Shorts format selection...")
        
        # Find the shorts format selection code
        shorts_section_start = content.find("if \"/shorts/\" in context.url") 
        if shorts_section_start == -1:
            shorts_section_start = content.find("if is_shorts")
        
        if shorts_section_start == -1:
            print("❌ Could not find YouTube Shorts section in the code")
            return False
        
        # Find the update block for shorts
        update_block_start = content.find("ydl_opts.update", shorts_section_start)
        if update_block_start == -1:
            print("❌ Could not find format update block for YouTube Shorts")
            return False
        
        # Find the end of the update block
        update_block_end = content.find("})", update_block_start)
        if update_block_end == -1:
            print("❌ Could not find end of format update block for YouTube Shorts")
            return False
        update_block_end += 2  # Include the closing parenthesis and brace
        
        # Build the new format selection code
        new_format_code = '''                ydl_opts.update({
                    'format': 'best',  # Use best pre-merged format
                    'merge_output_format': 'mp4',
                    'geo_bypass': True,
                    'extractor_retries': 5,
                    'fragment_retries': 10,
                })
'''
        
        # Replace the old format selection code
        new_content = content[:update_block_start] + new_format_code + content[update_block_end:]
        content = new_content
    
    # Write the updated file
    try:
        with open(target_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"✅ Updated {target_path}")
        return True
    except Exception as e:
        print(f"❌ Failed to write updated file: {str(e)}")
        return False

if __name__ == "__main__":
    print_header()
    
    # Check if we're running in a Docker environment
    in_docker = os.path.exists("/.dockerenv") or os.environ.get("DOCKER_CONTAINER") or os.environ.get("KUBERNETES_SERVICE_HOST")
    if in_docker:
        print("Detected Docker/container environment")
    else:
        print("Running in standard environment (not Docker)")
    
    # Update yt-dlp
    if update_yt_dlp():
        print("\n✅ Step 1 completed: yt-dlp updated")
    else:
        print("\n⚠️ Step 1 failed: Could not update yt-dlp, continuing anyway")
    
    # Create/update cookie file
    if create_direct_cookies():
        print("\n✅ Step 2 completed: Cookie file created")
    else:
        print("\n❌ Step 2 failed: Could not create cookie file")
        sys.exit(1)
    
    # Test YouTube download
    if test_youtube_download():
        print("\n✅ Step 3 completed: YouTube download test passed")
    else:
        print("\n❌ Step 3 failed: YouTube download test failed")
        print("Please check your cookie values and try again")
        sys.exit(1)
    
    # Update download_video.py code
    if update_download_video_code():
        print("\n✅ Step 4 completed: Updated download_video.py code")
    else:
        print("\n⚠️ Step 4 failed: Could not update download_video.py code")
    
    print("\n" + "=" * 60)
    print("All steps completed! YouTube downloads should now work in Docker.")
    print("=" * 60) 